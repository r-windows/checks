* using log directory 'C:/Users/Jeroen/Documents/checks/hashmap.Rcheck'
* using R version 3.6.0 Under development (Testing Rtools) (2019-03-14 r76238)
* using platform: x86_64-w64-mingw32 (64-bit)
* using session charset: ISO8859-1
* using options '--no-manual --no-build-vignettes'
* checking for file 'hashmap/DESCRIPTION' ... OK
* checking extension type ... Package
* this is package 'hashmap' version '0.2.2'
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking whether package 'hashmap' can be installed ... WARNING
Found the following significant warnings:
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const int, int>, spp::libc_allocator<std::pair<const int, int> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const int, int>, spp::libc_allocator<std::pair<const int, int> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const int, double>, spp::libc_allocator<std::pair<const int, double> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const int, double>, spp::libc_allocator<std::pair<const int, double> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const int, std::__cxx11::basic_string<char> >, spp::libc_allocator<std::pair<const int, std::__cxx11::basic_string<char> > > >::group_type' {aka 'class spp::sparsegroup<std::pair<const int, std::__cxx11::basic_string<char> >, spp::libc_allocator<std::pair<const int, std::__cxx11::basic_string<char> > > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const int, bool>, spp::libc_allocator<std::pair<const int, bool> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const int, bool>, spp::libc_allocator<std::pair<const int, bool> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const int, Rcomplex>, spp::libc_allocator<std::pair<const int, Rcomplex> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const int, Rcomplex>, spp::libc_allocator<std::pair<const int, Rcomplex> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const double, int>, spp::libc_allocator<std::pair<const double, int> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const double, int>, spp::libc_allocator<std::pair<const double, int> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const double, double>, spp::libc_allocator<std::pair<const double, double> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const double, double>, spp::libc_allocator<std::pair<const double, double> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const double, std::__cxx11::basic_string<char> >, spp::libc_allocator<std::pair<const double, std::__cxx11::basic_string<char> > > >::group_type' {aka 'class spp::sparsegroup<std::pair<const double, std::__cxx11::basic_string<char> >, spp::libc_allocator<std::pair<const double, std::__cxx11::basic_string<char> > > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const double, bool>, spp::libc_allocator<std::pair<const double, bool> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const double, bool>, spp::libc_allocator<std::pair<const double, bool> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const double, Rcomplex>, spp::libc_allocator<std::pair<const double, Rcomplex> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const double, Rcomplex>, spp::libc_allocator<std::pair<const double, Rcomplex> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const std::__cxx11::basic_string<char>, int>, spp::libc_allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const std::__cxx11::basic_string<char>, int>, spp::libc_allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const std::__cxx11::basic_string<char>, double>, spp::libc_allocator<std::pair<const std::__cxx11::basic_string<char>, double> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const std::__cxx11::basic_string<char>, double>, spp::libc_allocator<std::pair<const std::__cxx11::basic_string<char>, double> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >, spp::libc_allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > > >::group_type' {aka 'class spp::sparsegroup<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >, spp::libc_allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const std::__cxx11::basic_string<char>, bool>, spp::libc_allocator<std::pair<const std::__cxx11::basic_string<char>, bool> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const std::__cxx11::basic_string<char>, bool>, spp::libc_allocator<std::pair<const std::__cxx11::basic_string<char>, bool> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:2117:23: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsetable<std::pair<const std::__cxx11::basic_string<char>, Rcomplex>, spp::libc_allocator<std::pair<const std::__cxx11::basic_string<char>, Rcomplex> > >::group_type' {aka 'class spp::sparsegroup<std::pair<const std::__cxx11::basic_string<char>, Rcomplex>, spp::libc_allocator<std::pair<const std::__cxx11::basic_string<char>, Rcomplex> > >'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1402:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const int, int>, spp::libc_allocator<std::pair<const int, int> > >::value_type' {aka 'struct std::pair<const int, int>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1402:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const int, double>, spp::libc_allocator<std::pair<const int, double> > >::value_type' {aka 'struct std::pair<const int, double>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1402:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const int, bool>, spp::libc_allocator<std::pair<const int, bool> > >::value_type' {aka 'struct std::pair<const int, bool>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1402:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const double, int>, spp::libc_allocator<std::pair<const double, int> > >::value_type' {aka 'struct std::pair<const double, int>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1402:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const double, double>, spp::libc_allocator<std::pair<const double, double> > >::value_type' {aka 'struct std::pair<const double, double>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1402:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const double, bool>, spp::libc_allocator<std::pair<const double, bool> > >::value_type' {aka 'struct std::pair<const double, bool>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1506:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const double, double>, spp::libc_allocator<std::pair<const double, double> > >::value_type' {aka 'struct std::pair<const double, double>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1506:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const double, int>, spp::libc_allocator<std::pair<const double, int> > >::value_type' {aka 'struct std::pair<const double, int>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1506:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const double, bool>, spp::libc_allocator<std::pair<const double, bool> > >::value_type' {aka 'struct std::pair<const double, bool>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1506:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const int, int>, spp::libc_allocator<std::pair<const int, int> > >::value_type' {aka 'struct std::pair<const int, int>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1506:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const int, double>, spp::libc_allocator<std::pair<const int, double> > >::value_type' {aka 'struct std::pair<const int, double>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
  ../inst/include/hashmap/sparsepp/spp.h:1506:19: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'spp::sparsegroup<std::pair<const int, bool>, spp::libc_allocator<std::pair<const int, bool> > >::value_type' {aka 'struct std::pair<const int, bool>'} with no trivial copy-assignment; use copy-initialization instead [-Wclass-memaccess]
See 'C:/Users/Jeroen/Documents/checks/hashmap.Rcheck/00install.out' for details.
* checking installed package size ... OK
* checking package directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* loading checks for arch 'i386'
** checking whether the package can be loaded ... OK
** checking whether the package can be loaded with stated dependencies ... OK
** checking whether the package can be unloaded cleanly ... OK
** checking whether the namespace can be loaded with stated dependencies ... OK
** checking whether the namespace can be unloaded cleanly ... OK
** checking loading without being on the library search path ... OK
* loading checks for arch 'x64'
** checking whether the package can be loaded ... OK
** checking whether the package can be loaded with stated dependencies ... OK
** checking whether the package can be unloaded cleanly ... OK
** checking whether the namespace can be loaded with stated dependencies ... OK
** checking whether the namespace can be unloaded cleanly ... OK
** checking loading without being on the library search path ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking line endings in Makefiles ... OK
* checking compilation flags in Makevars ... OK
* checking for GNU extensions in Makefiles ... OK
* checking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS) ... OK
* checking compiled code ... OK
* checking examples ...
** running examples for arch 'i386' ... OK
** running examples for arch 'x64' ... OK
* checking for unstated dependencies in 'tests' ... OK
* checking tests ...
** running tests for arch 'i386' ... OK
  Running 'testthat.R'
** running tests for arch 'x64' ... OK
  Running 'testthat.R'
* DONE
Status: 1 WARNING
